import React from 'react';

const Plane = ({ gameState, multiplier, startTime, countdown }) => {
  // ============================================================================
  // PLANE POSITION CONTROL - This determines where the plane actually moves
  // ============================================================================
  const getPlanePosition = () => {
    if (gameState === 'betting') {
      // During countdown, animate plane taxiing from left to starting position
      if (countdown > 0) {
        // Calculate taxi progress (5 seconds countdown)
        const taxiProgress = (5 - countdown) / 5; // 0 to 1 over 5 seconds
        const startX = -10; // Start off-screen to the left
        const endX = 10; // End at starting position
        const taxiX = startX + (taxiProgress * (endX - startX));
        return { x: taxiX, y: 85 }; // Taxi along the ground - adjusted from 88 to 85
      }
      return { x: 10, y: 85 }; // Final starting position - adjusted from 88 to 85
    }
    
    if (gameState === 'running') {
      // Realistic takeoff sequence: Ground ‚Üí Takeoff ‚Üí Climb ‚Üí Hover (unlimited duration)
      const timeElapsed = Date.now() - (startTime || Date.now());
      const timeProgress = timeElapsed / 10000; // No max limit - can go beyond 1.0
      
      let x, y;
      
      if (timeProgress < 0.15) {
        // Phase 1: Ground taxi and takeoff (first 15% - about 1.5 seconds)
        const takeoffProgress = timeProgress / 0.15;
        x = 10 + (takeoffProgress * 20); // Taxi down runway
        
        if (takeoffProgress < 0.4) {
          // Ground roll - stay on ground, building speed
          y = 85; // Stay on runway - adjusted from 88 to 85
        } else if (takeoffProgress < 0.8) {
          // Rotation - nose starts lifting but still on ground
          const rotationProgress = (takeoffProgress - 0.4) / 0.4;
          y = 85 - (rotationProgress * 5); // Very slight lift, mostly nose rotation
        } else {
          // Liftoff! - finally leave the ground
          const liftProgress = (takeoffProgress - 0.8) / 0.2;
          y = 80 - (liftProgress * 18); // Gradual rise from ground - adjusted from 83 to 80
        }
        
      } else if (timeProgress < 0.4) {
        // Phase 2: Initial climb (15% to 40% - about 2.5 seconds)
        const climbProgress = (timeProgress - 0.15) / 0.25;
        x = 30 + (climbProgress * 30); // Continue moving right while climbing
        y = 62 - (climbProgress * 30); // Steady climb to middle altitude - adjusted from 65 to 62
        
      } else {
        // Phase 3: Hovering/cruising at altitude (unlimited duration for high multipliers)
        const hoverProgress = timeProgress - 0.4; // No division - can go beyond 1.0
        const baseX = 60; // Stay around right-middle
        const baseY = 32; // Stay at cruising altitude - adjusted from 35 to 32
        
        // Add realistic flight oscillation that continues indefinitely
        const oscillationSpeed = hoverProgress * 3; // Slower for longer flights
        const verticalFloat = Math.sin(oscillationSpeed) * 8; // Gentle up/down
        const horizontalFloat = Math.cos(oscillationSpeed * 0.7) * 12; // Side to side drift
        
        x = baseX + horizontalFloat;
        y = baseY + verticalFloat;
        
        // Very gradual climb during cruise (capped to prevent flying too high)
        y -= Math.min(hoverProgress * 3, 15); // Slower climb, capped at 15 units
      }
      
      return { x: Math.min(x, 90), y: Math.max(y, 5) }; // Keep within bounds
    }
    
    if (gameState === 'crashed') {
      // When crashed, let the plane continue flying out of frame to the right
      const timeElapsed = Date.now() - (startTime || Date.now());
      const timeProgress = Math.min(timeElapsed / 10000, 1);
      
      let x, y;
      
      if (timeProgress < 0.15) {
        const takeoffProgress = timeProgress / 0.15;
        x = 10 + (takeoffProgress * 20);
        
        if (takeoffProgress < 0.4) {
          y = 85; // Adjusted from 88 to 85
        } else if (takeoffProgress < 0.8) {
          const rotationProgress = (takeoffProgress - 0.4) / 0.4;
          y = 85 - (rotationProgress * 5); // Adjusted from 88 to 85
        } else {
          const liftProgress = (takeoffProgress - 0.8) / 0.2;
          y = 80 - (liftProgress * 18); // Adjusted from 83 to 80
        }
        
      } else if (timeProgress < 0.4) {
        const climbProgress = (timeProgress - 0.15) / 0.25;
        x = 30 + (climbProgress * 30);
        y = 62 - (climbProgress * 30); // Adjusted from 65 to 62
        
      } else {
        const hoverProgress = (timeProgress - 0.4) / 0.6;
        const baseX = 60;
        const baseY = 35;
        
        x = baseX + Math.sin(hoverProgress * 4) * 8;
        y = baseY + Math.sin(hoverProgress * 6) * 6;
        y -= hoverProgress * 10;
        
        // Continue flying to the right after crash point
        const extraProgress = Math.max(0, timeProgress - 1);
        x += extraProgress * 50; // Fly off screen to the right
      }
      
      return { x, y }; // Don't clamp x - let it fly off screen
    }
    
    return { x: 10, y: 88 };
  };

  const position = getPlanePosition();

  // ============================================================================
  // PLANE TILT/ROTATION CONTROL - This is where the plane's angle is determined
  // ============================================================================
  const getRotation = () => {
    // NEGATIVE values = plane tilts UPWARD (nose pointing up) ‚¨ÜÔ∏è
    // POSITIVE values = plane tilts DOWNWARD (nose pointing down) ‚¨áÔ∏è
    
    if (gameState === 'betting') {
      return 0; // Level on ground (ready for takeoff)
    }
    
    if (gameState === 'crashed') {
      return 25; // Nose dives DOWN when crashed (positive = downward)
    }
    
    // When flying, rotation matches the realistic takeoff sequence
    const timeElapsed = Date.now() - (startTime || Date.now());
    const timeProgress = timeElapsed / 10000; // No max limit for rotation either
    
    if (timeProgress < 0.15) {
      // Phase 1: Realistic takeoff sequence
      const takeoffProgress = timeProgress / 0.15;
      
      if (takeoffProgress < 0.4) {
        // Ground roll - level on runway, building speed
        return 0; // Level during ground roll
      } else if (takeoffProgress < 0.8) {
        // Rotation - pilot pulls back, nose comes up gradually
        const rotationProgress = (takeoffProgress - 0.4) / 0.4;
        return -12 * rotationProgress; // Gradual nose lift for rotation
      } else {
        // Liftoff - maintain climb attitude
        return -12; // Hold rotation attitude
      }
      
    } else if (timeProgress < 0.4) {
      // Phase 2: Initial climb - steady climbing attitude
      return -15; // Climbing attitude
      
    } else {
      // Phase 3: Cruising - level flight with gentle flight adjustments (unlimited)
      const hoverProgress = timeProgress - 0.4; // No division - can go beyond 1.0
      const baseAngle = -2; // Slight nose up for cruise
      const oscillation = Math.sin(hoverProgress * 3) * 3; // Slower, gentler adjustments for long flights
      
      return baseAngle + oscillation;
    }
  };

  return (
    <div className="relative w-full h-full">
      {/* Plane */}
      <div
        className={`
          absolute transition-all duration-300 ease-out z-20
          ${gameState === 'running' ? 'duration-100' : 'duration-1000'}
          ${gameState === 'crashed' ? 'opacity-0' : 'opacity-100'}
        `}
        style={{
          left: `${position.x}%`,
          top: `${position.y}%`,
          // üéØ THIS IS WHERE THE PLANE ACTUALLY GETS TILTED/ROTATED:
          transform: `translate(-50%, -50%) rotate(${getRotation()}deg)`
          // The getRotation() function above determines the angle
        }}
      >
        {/* Detailed Plane SVG */}
        <div className={`
          relative
          ${gameState === 'running' ? '' : ''}
          ${gameState === 'crashed' ? 'animate-pulse' : ''}
        `}>
          <svg 
            className="w-16 h-10" 
            version="1.0" 
            xmlns="http://www.w3.org/2000/svg" 
            viewBox="0 0 460 278" 
            preserveAspectRatio="xMidYMid meet"
          >
            <g fill="#e40539">
              <path d="M63 273 c-1.8 -3.5 -2.3 -3.9 -4 -3 -3.2 1.7 -5.5 1.1 -9 -2.5 l-3.3 -3.4 4.4 -1.9 c2.4 -1.1 8 -2.2 12.4 -2.6 27.1 -2.5 84.1 -19.2 161 -47.1 32.1 -11.7 80.4 -30.1 81.3 -31 1.2 -1.2 -1 -1.5 -11.9 -1.7 -10.6 -0.2 -11.7 0 -16.5 2.4 -13.1 6.8 -74.6 31.2 -92.8 36.7 l-6.9 2.1 -6.4 -5 -6.5 -4.9 -3.6 1.5 c-21.3 9 -88 36.4 -89.2 36.6 -1 0.2 -1.6 -0.6 -1.8 -2.3 -0.3 -2.4 0.5 -3 7.8 -6.9 4.5 -2.3 7.9 -4.5 7.5 -4.8 -0.3 -0.4 -4.3 -0.9 -8.9 -1.3 -9.7 -0.8 -17.3 -4 -28.2 -11.9 -4.8 -3.5 -7.8 -5 -10 -5 -4.3 0 -6.4 0.9 -6.4 2.7 0 0.8 6.8 8.7 15.1 17.6 13 13.7 14.9 16.2 13.3 16.8 -3.7 1.5 -4.8 0.8 -16.3 -10.3 -6.4 -6.2 -14.6 -14.2 -18.3 -17.7 l-6.7 -6.5 -8.8 4.2 -8.8 4.2 -0.3 -3.4 c-0.2 -2 0.2 -4.4 0.8 -5.5 0.6 -1.1 6.5 -4.8 13.1 -8.2 11.8 -6 14.2 -8 12.2 -10 -0.7 -0.7 -4.1 0.5 -10.2 3.5 l-9.1 4.6 0 -2.5 c0 -2 1.4 -3.3 7.7 -7 10.3 -6 17.3 -8.1 22.3 -6.6 2.1 0.6 10.7 6.3 19.1 12.6 19 14.3 29.4 19.9 35.9 19.2 5.3 -0.5 34 -13.7 61.9 -28.5 18.3 -9.7 21.6 -12.1 19.5 -14.2 -0.7 -0.7 -7.1 1.8 -21.4 8.5 -14.7 7 -20.5 9.3 -21.1 8.4 -1.2 -2 -0.1 -3.3 5.6 -6.3 3 -1.6 5.5 -3.4 5.5 -4 0 -0.7 -1.3 -2.5 -2.8 -4 l-2.9 -2.7 -19.8 9.6 c-10.9 5.2 -20 9.3 -20.2 9.1 -0.8 -0.7 2.5 -12.8 3.8 -14.1 0.8 -0.8 9.5 -5.6 19.4 -10.8 17.7 -9.4 18 -9.6 17.8 -12.7 0 -1.7 -0.4 -3.4 -0.7 -3.7 -0.3 -0.3 -3.9 0.9 -8 2.7 l-7.4 3.3 -8.9 -9.3 c-4.8 -5.1 -8.9 -9.6 -9.1 -10 -0.5 -1.4 8.8 -7.9 14.6 -10.1 10.4 -4 10.9 -3.9 118.5 11.3 35.6 5 65.5 9.7 66.5 10.4 1.6 1.1 1.6 1.4 -0.1 4.8 l-1.7 3.7 2.8 1 c1.5 0.5 5.8 2.1 9.5 3.6 l6.9 2.5 10.1 -4.3 c12.4 -5.2 32.9 -15.6 45.6 -23.2 l9.4 -5.5 3.2 2.4 c3.2 2.4 6.9 3.1 7.9 1.6 0.3 -0.5 -2.5 -6.9 -6.3 -14.3 -3.7 -7.4 -8.7 -18.4 -11 -24.4 -2.4 -6.1 -4.8 -11.6 -5.4 -12.4 -0.9 -1 -3.3 -1.2 -10.7 -0.8 -10.8 0.5 -18.1 2.6 -42 12 -15.4 6 -67.7 31.5 -70.6 34.4 -1.3 1.4 -3.4 1.4 -19.2 -0.1 -9.7 -0.9 -18 -1.6 -18.4 -1.6 -1.4 0 -0.8 -5.5 1.1 -9.7 1.6 -3.4 3.9 -5.4 14 -12.1 14.3 -9.5 28.2 -16.5 37.4 -18.9 l6.5 -1.7 9.9 3.9 c14.3 5.6 16.3 5.6 39.8 -1 38.2 -10.6 43.5 -11.8 52.2 -11.9 8 -0.1 8.3 0 11.6 3.3 2.6 2.5 5.7 8.3 12 23 4.7 10.8 9 21.3 9.7 23.5 1.7 5.4 0.8 11.9 -2.4 16 -6.7 8.8 -38 25.2 -82.1 42.8 -22.8 9.1 -61.8 21.9 -162.5 53.3 -31.1 9.7 -64.7 20.3 -74.6 23.6 -10 3.2 -18.9 5.9 -19.8 5.9 -0.8 0 -2.5 -1.8 -3.6 -4z m229.5 -105 c3.8 -2.3 7.1 -6.9 5.8 -8 -0.6 -0.5 -144.9 -20.8 -158.8 -22.3 -1.2 -0.1 -2 0.4 -2 1.3 0 1.2 15.5 4.6 72 16.1 39.6 8.1 73.7 14.7 75.9 14.8 2.3 0.1 5.2 -0.7 7.1 -1.9z m-43.7 -46.4 c4.2 -2.3 11.2 -5.8 15.4 -7.7 4.3 -1.9 7.8 -3.7 7.8 -4.1 0 -0.4 -2.8 -1.3 -6.2 -2 -7.7 -1.7 -13.7 -0.9 -22.4 3.3 -6.7 3.1 -18.9 11.7 -18.1 12.6 0.6 0.5 9.3 1.9 13.5 2.2 1.3 0 5.8 -1.9 10 -4.3z m34.5 -6.2 c7.5 -3.8 10.7 -6 10.5 -7.1 -0.4 -2.1 -18.3 -9.2 -23.4 -9.3 -2.2 0 -4.9 0.6 -6 1.4 -2.1 1.6 -2.1 1.6 10.4 6.5 2.6 1 4.8 2.3 5 2.9 0.2 0.6 -1.9 2.2 -4.7 3.6 -5.5 2.8 -6.6 4 -5.7 6.1 0.8 2.3 2.3 1.9 13.9 -4.1z"/>
              <path d="M441.7 195.8 c-6.8 -10.1 -13.5 -20.3 -14.9 -22.8 -1.5 -2.5 -5.5 -14.1 -9.1 -25.7 l-6.5 -21.3 5.1 -5 c2.7 -2.8 5.1 -4.9 5.2 -4.8 0.1 0.2 5.2 9.4 11.4 20.6 11.9 21.3 15.8 31 23.1 58 3.3 11.9 3.3 12.3 1.7 15.7 -0.9 1.9 -2.1 3.5 -2.6 3.5 -0.5 0 -6.5 -8.2 -13.4 -18.2z m14.1 10.3 c0.2 -1.9 -0.5 -4.6 -1.7 -6.7 -1.8 -3.1 -22 -30.4 -24.3 -32.9 -1.2 -1.3 -3 1.5 -2.2 3.5 1.2 3.4 26 39.9 26.9 39.6 0.6 -0.1 1.1 -1.7 1.3 -3.5z"/>
              <path d="M296.5 147.9 c-13.2 -2.6 -24.6 -4.9 -25.4 -5.1 -0.8 -0.2 11.3 -5.4 27 -11.6 l28.3 -11.4 5.3 5.9 c2.9 3.2 5.2 6.3 5.3 6.9 0 0.6 -2.3 5.5 -5.1 10.8 -4.8 9.1 -5.2 9.6 -8.2 9.5 -1.8 -0.1 -14 -2.3 -27.2 -5z"/>
              <path d="M336 151.7 c0 -0.2 1.6 -3.6 3.6 -7.5 1.9 -4 4.1 -9 4.9 -11.1 l1.3 -3.8 -5.3 -6.9 c-5.3 -6.8 -5.4 -6.9 -3.2 -8.1 2 -1.1 2.6 -0.8 6.2 3.2 2.2 2.5 4.3 4.5 4.6 4.5 0.3 0 1.7 -3.9 3 -8.7 l2.4 -8.8 0.3 4.9 c0.2 2.6 -0.2 8 -0.8 11.8 l-1 7 5.1 6.4 5.1 6.4 -2.7 1 c-2.2 0.9 -2.9 0.6 -5 -1.8 -1.3 -1.5 -2.5 -3 -2.5 -3.4 -0.1 -2.3 -1.9 -0.1 -3.9 4.6 -1.2 3 -2.8 5.9 -3.5 6.5 -1.4 1.1 -8.6 4.3 -8.6 3.8z"/>
              <path d="M405.9 114.3 c-7.2 -16.1 -7.3 -16.4 -5.8 -17.5 1.5 -1 21.2 -0.4 24.2 0.7 0.9 0.4 1.7 1.4 1.7 2.2 0 4.2 -12.6 21.3 -15.6 21.3 -0.9 0 -2.8 -2.9 -4.5 -6.7z m9.4 -10 c4.8 -2 8.7 -4 8.7 -4.4 0 -1.2 -4.4 -1.9 -13.2 -1.9 -8.2 0 -8.8 0.1 -8.8 2 0 2.4 2.7 8 3.8 8 0.4 0 4.6 -1.6 9.5 -3.7z"/>
              <path d="M386.2 75.5 c-10.7 -19.1 -14 -27.3 -20.7 -51.6 -4 -14.3 -4.3 -18.7 -1.6 -22 l1.9 -2.3 14.8 22.3 14.8 22.3 7.6 24.2 c4.2 13.2 7.4 24.2 7.1 24.3 -0.3 0.1 -3.5 0.3 -7.1 0.6 l-6.5 0.4 -10.3 -18.2z m6.8 -29.4 c0 -1.5 -23.2 -37.5 -26.1 -40.6 -1.3 -1.3 -2.9 1.2 -2.9 4.7 0 2.5 8.8 15.4 22.3 32.7 4.6 6 6.7 7 6.7 3.2z"/>
            </g>
          </svg>

          {/* Engine fire effect when flying */}
          {gameState === 'running' && (
            <div className="absolute -left-6 top-1/2 transform -translate-y-1/2">
              <div className="w-8 h-2 bg-gradient-to-r from-orange-500 via-red-500 to-transparent rounded-full animate-pulse opacity-80"></div>
              <div className="w-6 h-1 bg-gradient-to-r from-yellow-400 via-orange-500 to-transparent rounded-full animate-pulse opacity-60 mt-0.5"></div>
            </div>
          )}

          {/* Explosion effect when crashed */}
          {gameState === 'crashed' && (
            <div className="absolute inset-0 flex items-center justify-center">
              <div className="w-16 h-16 bg-gradient-radial from-yellow-400 via-red-500 to-transparent rounded-full animate-ping"></div>
              <div className="absolute w-12 h-12 bg-gradient-radial from-orange-400 via-red-600 to-transparent rounded-full animate-pulse"></div>
            </div>
          )}
        </div>

        {/* Smoke trail when flying */}
        {gameState === 'running' && (
          <div className="absolute -left-12 top-1/2 transform -translate-y-1/2 flex space-x-1">
            {[...Array(3)].map((_, i) => (
              <div
                key={i}
                className="w-2 h-2 bg-gray-400 rounded-full opacity-40 animate-pulse"
                style={{
                  animationDelay: `${i * 0.3}s`,
                  animationDuration: '1s'
                }}
              />
            ))}
          </div>
        )}
      </div>

      {/* Ground/Runway Reference */}
      {gameState === 'betting' && (
        <div className="absolute inset-0 pointer-events-none">
          {/* Runway/Ground line */}
          <div 
            className="absolute w-full h-0.5 bg-gray-500 opacity-30"
            style={{ top: '89%' }}
          />
          {/* Runway markers */}
          {[...Array(8)].map((_, i) => (
            <div
              key={i}
              className="absolute w-8 h-1 bg-gray-400 opacity-40"
              style={{
                left: `${10 + i * 10}%`,
                top: '89%',
                transform: 'translateY(-50%)'
              }}
            />
          ))}
        </div>
      )}

      {/* Clouds for atmosphere */}
      <div className="absolute inset-0 pointer-events-none">
        {[...Array(5)].map((_, i) => (
          <div
            key={i}
            className="absolute w-16 h-8 bg-white opacity-5 rounded-full"
            style={{
              left: `${20 + i * 20}%`,
              top: `${30 + (i % 2) * 20}%`,
              animation: `float ${3 + i}s ease-in-out infinite alternate`
            }}
          />
        ))}
      </div>
    </div>
  );
};

export default Plane;
